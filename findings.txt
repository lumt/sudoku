Summarise your findings here (see specification).

/* Function description */
The solve_board() function iterates over each cell in the board and inputs a value that passes
the given constraints of the game. For that value, the function recursively calls itself and
sees whether it can continue until it finishes the board. Up to a point, if the function is
unable to further find a value that will pass the contraint, it returns false thus destroying
the current stack call, signalling the previous function caller to use a different value
instead.

/* Findings */
A clock() function from <ctime> header was utilized to calculate the solve_board()
function iteration time. Also, a static variable was used to count the amount of times
the function has been called recursively. These two tools that was used to judge the difficulty
of the mystery boards:

Board			Time			Recursion Count		Difficulty

easy.dat		~0.005ms		2172
medium.dat		~25ms			15662
mystery1.dat   		~600ms  		421547	  		"extremely hard"
mystery2.dat   		-			-			"impossible"
mystery3.da   		~15ms			14134			"hard"

/* Explanation */
It is assumed that the harder the board, the more times the function has to recursively call
itself and so, the longer it will take to finish execution. This is because harder sudoku
boards start out with more possibilities for any given cell as they start with less given
values so their constraints so they essentially have less constraints than that of easier
boards. Therefore, more trial and error was required for the program until it has found a
single unique solution that would satisfy everything.

For the 'easy.dat' board, it was relatively easy to work out which cells to begin with. By
process of elimination, one can simply input in a value into a cell without having to guess
it out to begin with. Compared to that to 'medium.dat', it is not possible to do so for
not even a single cell. Hence the program required more guessing as seen from the results.

Therefore, following this pattern,'mystery1.dat' was rated as "extremely hard" because it
took the longest and the most recursive count. 'mystery2.dat' was rated as "hard" as it
took less the amount of time. Finally mystery2.dat is actually impossible to solve as no
unique solution exists for it to pass all constraints.
